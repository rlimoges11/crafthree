<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ entry.title }}</title>
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
{% block ui %}
    <div id="editor">
        {% if entry is defined %}
            {% if entry.isEditable() and not craft.request.isLivePreview %}
                <a href="{{ entry.cpEditUrl }}" class="editorLink">Edit entry</a>
            {% endif %}
        {% endif %}
    </div>
{% endblock %}
{% block scene %}{% endblock %}
{% block scripts %}
    <script id="vertexShader" type="x-shader/x-vertex">
        varying vec2 vUv;
        varying vec3 vPos;
        uniform float timer;
        uniform float planetRadii[9];
        uniform float planetPositionsX[9], planetPositionsY[9];

        void main(void){
            vUv = uv;
            vec2 p = -1.0 + 2.0 * vUv;
            float d = sin(sqrt(((p.x*p.x) + (p.y*p.y))));

            {# Sun #}
            vec3 newPos = position + vec3(0,0,d*1000.0 - 500.0);

            {# Orbits #}
            for(int i=0;i<4;i++){
                {# position #}
                float plx = planetPositionsX[i] / 5000.;
                float ply = planetPositionsY[i] / 5000.;
                float p1 = (plx-p.x);
                float p2 = (ply-p.y);
                float pld = (p1*p1+p2*p2) * 30.;
                if(pld < planetRadii[i] / 200. ){
                    newPos = newPos + vec3(0,0,pld*pld * planetRadii[i] * 10. - d*600.);
                }
            }

            vPos = newPos;
            gl_Position = projectionMatrix * modelViewMatrix * vec4( newPos, 1.0 );
        }

    </script>
    <script id="fragmentShader" type="x-shader/x-fragment">
			varying vec2 vUv;
			uniform float timer;
			float r, g, b, a, d;
			uniform vec3 starColor;
			uniform float planetOrbitalDistances[9], planetRadii[9];
			uniform float planetColorsR[9], planetColorsG[9], planetColorsB[9];
            uniform float planetPositionsX[9], planetPositionsY[9];

			void main()	{
				vec2 p = -1.0 + 2.0 * vUv;
				d = sqrt(((p.x*p.x) + (p.y*p.y)))*4.0;

                {# Solar glow #}
				r = starColor[0] - d;
				g = starColor[1] - d;
				b = 0.5 + starColor[2] - ((d/5.0)*2.0)/3.0;
				a = 1.0 - d / 3.;

                {# Grid Bold #}
                if((sin(p.x*50.) > 0. && sin(p.x*50.) < 0.05) || (sin(p.y*50.) > 0. && sin(p.y*50.) < 0.05)){
                    r = starColor[0] - (d / 5.);
                    g = starColor[1] - (d / 5.);
                    b = starColor[2] - (d / 5.);
                }
                {# Grid sublines #}
                if((sin(p.x*500.) > 0. && sin(p.x*500.) < 0.05) || (sin(p.y*500.) > 0. && sin(p.y*500.) < 0.05)){
                    r = starColor[0] - (d / 5.);
                    g = starColor[1] - (d / 5.);
                    b = starColor[2] - (d / 5.);
                }

                {# Planets #}
                for(int i=0;i<4;i++){
                    {# Orbits #}
                    if(d*1260. + 2. > planetOrbitalDistances[i] && d*1260. - 2. < planetOrbitalDistances[i]){
                        r= planetColorsR[i];
                        g= planetColorsG[i];
                        b= planetColorsB[i];
                        {#a = 0.9;#}
                    }

                    {# position #}
                    float plx = planetPositionsX[i] / 5000.;
                    float ply = planetPositionsY[i] / 5000.;
                    float p1 = (plx-p.x);
                    float p2 = (ply-p.y);
                    float pld = sqrt(p1*p1+p2*p2) * 20.;
                    if(pld < planetRadii[i] / 100. ){
                        r= planetColorsR[i]/2. + r - 0.2;
                        g= planetColorsG[i]/2. + g - 0.2;
                        b= planetColorsB[i]/2. + b -0.2;
                        a= 0.3;
                    }
                }

                if (b < 0.072) b = 0.072;
				gl_FragColor = vec4(r, g, b, a);
			}

    </script>
    <script src="/js/vendors/threejs/three.min.js"></script>
    <script src="/js/vendors/threejs/stats.min.js"></script>
    <script src="/js/vendors/threejs/Detector.js"></script>
    <script src="/js/vendors/threejs/systemControls.js"></script>
    <script src="/js/views/viewers/main.js"></script>
{% endblock %}
</body>
</html>