<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ entry.title }}</title>
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
{% block scene %}{% endblock %}
{% block scripts %}
    <script id="vertexShader" type="x-shader/x-vertex">
        varying vec2 vUv;
        varying vec3 vPos;
        uniform float timer;
        uniform bool showWarp;
        uniform float planetRadii[9], planetOrbitalDistances[9];
        uniform float planetPositionsX[9], planetPositionsY[9];

        void main(void){
            vUv = uv;
            vec2 p = -1.0 + 2.0 * vUv;
            float d = sin(sqrt((p.x*p.x + p.y*p.y)));

            if(showWarp == true) {
                {# Sun #}
                vec3 newPos = position + vec3(0, 0, d*1000.0 - 500.0);

                {# Orbits #}
                for(int i=0;i<9;i++){
                    float plx = planetPositionsX[i] / 5000.;
                    float ply = planetPositionsY[i] / 5000.;
                    float p1 = (plx-p.x);
                    float p2 = (ply-p.y);
                    float pld = (p1*p1+p2*p2) * planetRadii[i];
                    if(pld < planetRadii[i] / 50.){
                        newPos = newPos + vec3(0,0,(-2. + pld*50. - planetRadii[i]));
                    }
                }
                gl_Position = projectionMatrix * modelViewMatrix * vec4(newPos, 1.0);
            } else {
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        }





    </script>
    <script id="fragmentShader" type="x-shader/x-fragment">
    varying vec2 vUv;
    uniform float timer;
    uniform bool showGrid, showOrbits;
    uniform int targetIndex;
    uniform vec3 starColor;
    uniform float starRadius;
    uniform float planetOrbitalDistances[9], planetRadii[9]; // TODO need to get rid of these 9's
    uniform float planetColorsR[9], planetColorsG[9], planetColorsB[9];
    uniform float planetPositionsX[9], planetPositionsY[9];
    float r, g, b, a, d;

    void main()	{
        vec2 p = -1.0 + 2.0 * vUv;
        d = sqrt(((p.x*p.x) + (p.y*p.y)))*4.0;

        {# Solar glow #}
        r = (starColor[0] + starRadius/150.) / (d/0.1);
        g = (starColor[1] + starRadius/150.) / (d/0.1);
        b = (starColor[2] + starRadius/150.) / (d/0.1) + 0.1*d;
        a = (1.0 - d * 0.25);

        if(targetIndex == 0){
            {# Solar Target Circle #}
            if(d > 0.15 && d < 0.16){
                r= starColor[0];
                g= starColor[1];
                b= starColor[2];
            }
            if(d > 0.2 && d < 0.21){
                r= starColor[0];
                g= starColor[1];
                b= starColor[2];
            }
            if(d > 0.16) {
                if(p.x > -0.001 && p.x < 0.001){
                    r= starColor[0];
                    g= starColor[1];
                    b= starColor[2];
                }
                if(p.y > -0.001 && p.y < 0.001){
                    r= starColor[0];
                    g= starColor[1];
                    b= starColor[2];
                }
            }
        }

        if(showGrid == true) {
            {# Grid Lines Bold #}
            if((sin(p.x*250.) > -0.05 && sin(p.x*250.) < 0.05) || (sin(p.y*250.) > -0.05 && sin(p.y*250.) < 0.05)){
                r = starColor[0]*0.8 - (d/4.);
                g = starColor[1]*0.8 - (d/4.);
                b = starColor[2]*0.8 - (d/4.);
            }
            {# Grid Lines Main #}
            if((sin(p.x*50.) > -0.01 && sin(p.x*50.) < 0.01) || (sin(p.y*50.) > -0.01 && sin(p.y*50.) < 0.01)){
                r = starColor[0] + (d/6.);
                g = starColor[1] + (d/6.);
                b = starColor[2] + (d/6.);
            }
        }

        {# Planets #}
        if(showOrbits == true) {
            for(int i=0;i<9;i++){
                {# Orbits #}
                float t = planetRadii[i]/5.;
                float plx = planetPositionsX[i]/5000.;
                float ply = planetPositionsY[i]/5000.;
                float p1 = plx - p.x;
                float p2 = ply - p.y;
                float pld = sqrt(p1*p1 + p2*p2)*20.;
                float c = sin(pld*4. - timer*240.);

                if(d*1260. + t > planetOrbitalDistances[i] && d*1260. - t < planetOrbitalDistances[i]){
                    if(c > 0.3) {
                        r = r/5. + planetColorsR[i]*c;
                        g = g/5. + planetColorsG[i]*c;
                        b = b/5. + planetColorsB[i]*c;
                    } else {
                        r = r/5. + planetColorsR[i]/5.;
                        g = g/5. + planetColorsG[i]/5.;
                        b = b/5. + planetColorsB[i]/5.;
                    }
                }

                {# Shadow #}
                if(pld < planetRadii[i]/150.){
                    r = planetColorsR[i]/5. + r/5.;
                    g = planetColorsG[i]/5. + g/5.;
                    b = planetColorsB[i]/5. + b/5.;
                }
                if(targetIndex == i+1){
                    float aa = 1.75;

                    {# Planet color #}
                    float r1 = planetColorsR[i] - pld/100. + c/2.;
                    float g1 = planetColorsG[i] - pld/100. + c/2.;
                    float b1 = planetColorsB[i] - pld/100. + c/2.;

                    float a1 = a;

                    {# Planet color translucid #}
                    float r2 = planetColorsR[i]/aa + r*aa;
                    float g2 = planetColorsG[i]/aa + g*aa;
                    float b2 = planetColorsB[i]/aa + b*aa;
                    float a2 = 0.25;



                    if (pld < planetRadii[i]/80. + 1.2){
                        {# Target Lines #}
                        if(( p.x > plx -0.001 && p.x < plx + 0.001 )||( p.y > ply -0.001 && p.y < ply + 0.001 ) ){
                            r = r1;
                            g = g1;
                            b = b1;
                            a = a1;
                        }

                        if(pld > planetRadii[i]/150.){
                            {# warped area #}
                            if(pld > planetRadii[i]/100. && pld < planetRadii[i]/100. + 1.00){
                                r = r2;
                                g = g2;
                                b = b2;
                                a = a2;
                            }

                            {# 1st Target Circle Border #}
                            if(pld < planetRadii[i]/150. + 0.02){
                                r= r1;
                                g= g1;
                                b= b1;
                                a = 1.;
                            }

                            {# 2nd Targed Circle Border #}
                            if(pld > planetRadii[i]/100. - 0.01  && pld < planetRadii[i]/100. - 0.03){
                                r= r1;
                                g= g1;
                                b= b1;
                                a = a1;
                            }

                            {# 3rd Targed Circle Border #}
                            if(pld > planetRadii[i]/100. +1.0  && pld < planetRadii[i]/100. + 1.02){
                                r= r1;
                                g= g1;
                                b= b1;
                                a = a1;
                            }

                            {# 4th Target Circle Border #}
                            if(pld > planetRadii[i]/100. + 1.13 && pld < planetRadii[i]/100. + 1.15){
                                r= r1;
                                g= g1;
                                b= b1;
                                a = a1;
                            }
                        }
                    }
                }
            }
        }

        {#if (b < 0.072) b = 0.072;#}
        gl_FragColor = vec4(r, g, b, a);
    }






    </script>
    <script src="/js/vendors/threejs/three.min.js"></script>
    <script src="/js/vendors/threejs/libs/dat.gui.min.js"></script>
    <script src="/js/vendors/threejs/libs/stats.min.js"></script>
    <script src="/js/vendors/threejs/libs/Detector.js"></script>
    <script src="/js/vendors/threejs/libs/GPUParticleSystem.js"></script>

    <script src="/js/vendors/threejs/systemControls.js"></script>
    <script src="/js/views/viewers/main.js"></script>
    <script src="/js/views/viewers/gui.js"></script>
{% endblock %}
</body>
</html>